import db from "../../db/index.js";
import botService from "../service/bot.service.js";

const callbackController = {};



callbackController.lang = async (msg, bot, data) => {
    try {
        if(msg == undefined || bot == undefined || data == undefined) throw new Error("Missing params");

        const chatId = msg.chat.id;
        const userTgId = data[0];
        const selectedLang = data[1];
        
        if(selectedLang == "eng") {
            await botService.resendUserMainInlineMenu(chatId, bot);
            const engLangErrMessage = await bot.sendMessage(
                chatId, 
                "*–ó–∞—Ä–∞–∑ –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É*\n"+
                "*–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–∏–±—ñ—Ä –∞–Ω–≥–ª—ñ–π—Å–∫–æ—ó –º–æ–≤–∏ –∑–∞–ø—Ä–∞—Ü—é—î*",
                {
                    parse_mode: "Markdown"
                }
            );
            // setTimeout(() => {
                botService.close(chatId, msg.message_id, bot);
            // }, 10000);
            setTimeout(() => {
                botService.close(chatId, engLangErrMessage.message_id, bot);
            }, 7000);
            // setTimeout(() => {
            // }, 10000);

            return;
        }

        await db.models.Account.update({ lang: selectedLang }, {
            where: {
                tgId: userTgId
            }
        });


        await botService.resendUserMainInlineMenu(chatId, bot);

        const newMessage = await bot.sendMessage(
            chatId, 
            "*–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –º–æ–≤—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!*",
            {
                parse_mode: "Markdown"
            }
        );


        // setTimeout(() => {
            botService.close(chatId, msg.message_id, bot);
        // }, 10000);
        setTimeout(() => {
            botService.close(chatId, newMessage.message_id, bot);
        }, 7000);
        // setTimeout(() => {
        // }, 10000);

    } catch (error) {
        console.log('error.message (in callbackController.lang):>> ', error.message);
    }
}


callbackController.profile = async (msg, bot, userData) => {
    try {
        const chatId = msg.chat.id;

        const userInfo = userData.info.split("|");
        const userName = userInfo[0] + " " + userInfo[1];
        let userTag = "";

        if(userInfo[2] != "") userTag = "@"+userInfo[2];

        await bot.editMessageText(
            `üî∞ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n`+
            `üë§ ${userName}\n`+
            `${userTag}`+
            `\n\n<b>ID</b> <em>${userData.tgId}</em>`,
            {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: "‚¨ÖÔ∏è", callback_data: "menu|0" }]
                    ]
                })
            }
        );
    } catch (error) {
        console.log('error.message (in callbackController.profile):>> ', error.message);
    }
};

callbackController.faq = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;

        await bot.editMessageText(
            `üöÄ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ \`Planify\` FAQ!*\n\n`+
            `*–Ø–∫ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è?*\n`+
            `–ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å –≤ –≤–∫–ª–∞–¥—Ü—ñ –ö–∞–ª–µ–Ω–¥–∞—Ä –ø–ª–∞–Ω—ñ–≤ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω. üìÖ\n\n`+

            `*–Ø–∫ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?*\n`+
            `–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å —Ç–∞ –ø—Ä–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞—è–≤–Ω—ñ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –ø–ª–∞–Ω–∏, –∫–æ–∂–µ–Ω –∑ –Ω–∏—Ö –±—É–¥–µ –º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å(–≤–∏–∫–æ–Ω–∞–Ω–æ, –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, –≤ –ø—Ä–æ—Ü–µ—Å—ñ)`+
            `—Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. üìä\n\n`+

            `*–ß–∏ –º–æ–∂–Ω–∞ —Å–ø—ñ–ª—å–Ω–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è?*\n`+
            `–ó–∞—Ä–∞–∑ –Ω—ñ, –∞–ª–µ –≤ –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–µ—Ä—Å—ñ—è—Ö –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–∞–∑–æ–º! üë´\n\n`+ 

            `*–ß–∏ –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?*\n`+
            `–ó–∞—Ä–∞–∑ –Ω—ñ, –∞–ª–µ –≤ –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–µ—Ä—Å—ñ—è—Ö —Ü–µ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ\n\n`+

            `*–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è* \`Planify\`*!* *–ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º —Å–≤–æ—ó—Ö –¥–Ω—ñ–≤.* üåü`,
            {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: "Markdown",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: "‚¨ÖÔ∏è", callback_data: "menu|0" }]
                    ]
                })
            }
        );
    } catch (error) {
        console.log('error.message (in callbackController.faq):>> ', error.message);
    }
};


callbackController.menu = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;
        const stage = data[0];

        switch (stage) {
            case "0":
                await bot.editMessageText(
                    `*–ú–µ–Ω—é* ‚¨áÔ∏è`,
                    {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: "Markdown",
                        reply_markup: botService.getInlineMenu()
                    }
                );

                // botService.resendUserMainInlineMenu(chatId, bot);
                break;


            case "slang":
                callbackController.selectLang(msg, bot, {});
                break;
        
            default:
                break;
        }

    } catch (error) {
        console.log('error.message (in callbackController.menu):>> ', error.message);
    }
};


callbackController.selectLang = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;
        await bot.editMessageText(
            `*–û–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–≤—É* ‚¨áÔ∏è`,
            {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: "Markdown",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [
                            { text: "üá∫üá¶", callback_data: `lang|${chatId}|ukr`}, 
                            { text: "üá¨üáß", callback_data: `lang|${chatId}|eng`}
                        ]
                    ]
                })
            }
        );
    } catch (error) {
        console.log('error.message (in callbackController.selectLang):>> ', error.message);
    }
};

const monthes = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å", 5: "–¢—Ä–∞–≤–µ–Ω—å",
    6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å", 9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å",
    11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
};
callbackController.datesList = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;
        if(data.length < 2) return;
        const month = +data[0];
        const year = 2000 + +data[1];
        let isLeapYear = false;
        let days;


        const ikeyboard = [];


        if(year % 4 == 0) isLeapYear = true;
        if(month == 2 && !isLeapYear) days = 28;
        else if(month == 2 && isLeapYear) days = 29;
        else if(
            month == 1 ||
            month == 3 ||
            month == 5 ||
            month == 7 || 
            month == 8 ||
            month == 10 ||
            month == 12
        ) days = 31;
        else days = 30;

        ikeyboard.push([
            { text: ""+year, callback_data: "-" }
        ]);
        ikeyboard.push([
            { text: monthes[month], callback_data: "-" }
        ]);

        let weekCounter = 0;
        let week = [];
        for(let dayIndex = 1; dayIndex <= days; dayIndex++) {
            if(weekCounter != 7) {
                weekCounter++;
            }
            else {
                ikeyboard.push(week);
                weekCounter = 0;
                week = [];
            }

            let dayDate;
            if(dayIndex < 10) dayDate = "0"+dayIndex;
            else dayDate = ""+dayIndex;
            
            console.log(`${dayIndex}.${month}.${year-2000}`);
            console.log(chatId);
            
            week.push({ text: dayDate, callback_data: `plan_date|${dayIndex}|${month}|${year-2000}` });
        }
        if(week.length != 0) ikeyboard.push(week);



        const controllers = [];
        
        let previousYear = year;
        let previousMonth = month-1;

        if(month == 1) {
            if(year > 2024) {
                previousYear--;
                previousMonth = 12;
                controllers.push({ text: "‚óÄÔ∏è", callback_data: `dates_list|${previousMonth}|${previousYear-2000}` });
            }
        }
        else {
            controllers.push({ text: "‚óÄÔ∏è", callback_data: `dates_list|${previousMonth}|${previousYear-2000}` });
        }

        let nextYear = year;
        let nextMonth = month+1;
        if(month == 12) {
            nextYear++;
            nextMonth = 1;
        }
        controllers.push({ text: "‚ñ∂Ô∏è", callback_data: `dates_list|${nextMonth}|${nextYear-2000}` });
        

        ikeyboard.push(controllers);

        ikeyboard.push([{ text: "‚¨ÖÔ∏è", callback_data: "menu|0" }]);


        await bot.editMessageText(
            `*–ö–∞–ª–µ–Ω–¥–∞—Ä:*`,
            {
                chat_id: chatId,
                message_id: msg.message_id,
                parse_mode: "Markdown",
                reply_markup: JSON.stringify({
                    inline_keyboard: ikeyboard
                })
            }
        );
    } catch (error) {
        console.log('error.message (in callbackController.datesList):>> ', error.message);
    }
};



callbackController.plan_date = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;
        const day = +data[0];
        const month = +data[1];
        const year = 2000 + +data[2];

        // const ikeyboard = [];
        const currentDate = new Date();
        const formattedDate = currentDate.getDate()+"."+(currentDate.getMonth()+1)+"."+currentDate.getFullYear();
        const formattedDateToCheck = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
        const selectedDateToCheck = new Date(year, month-1, day);


        const plans = await db.models.Plan.findAll({
            where: {
                accountId: chatId,
                date: `${day}.${month}.${year-2000}`
            }
        });
        let stringPlansAmount = "";
        if(plans.length != 0) stringPlansAmount = `(${plans.length})`;


        if(selectedDateToCheck >= formattedDateToCheck) {
            await bot.editMessageText(
                `*${monthes[month]}, ${day}, ${year}:*`,
                {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    parse_mode: "Markdown",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: "–ü–ª–∞–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å "+stringPlansAmount, callback_data: `plan|list|${day}.${month}.${year-2000}` }],
                            [{ text: "–î–æ–¥–∞—Ç–∏ –ø–ª–∞–Ω‚ûï", callback_data: `plan|add|${day}.${month}.${year-2000}` }],
                            [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data: `menu|0` }],
                            [{ text: "–ö–∞–ª–µ–Ω–¥–∞—Ä ‚¨ÖÔ∏è", callback_data: `dates_list|${month}|${year-2000}` }]
                        ]
                    })
                }
            );
        }
        else if(formattedDateToCheck > selectedDateToCheck) {
            await bot.editMessageText(
                `–ú–∏–Ω—É–ª–∏–π –¥–µ–Ω—å\n`+
                `*${monthes[month]}, ${day}, ${year}:*`,
                {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    parse_mode: "Markdown",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: "–ü–ª–∞–Ω–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å", callback_data: `plan|list|${day}.${month}.${year-2000}` }],
                            [{ text: "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data: `menu|0` }],
                            [{ text: "‚¨ÖÔ∏è", callback_data: `dates_list|${month}|${year-2000}` }]
                        ]
                    })
                }
            );
        }

    } catch (error) {
        console.log('error.message (in callbackController.plan_date):>> ', error.message);
    }
};


const planStuses = {
    "inProgress": "–í –ø—Ä–æ—Ü–µ—Å—ñ",
    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    "canceled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
};
callbackController.plan = async (msg, bot, data) => {
    try {
        const chatId = msg.chat.id;
        const action = data[0];
        

        switch (action) {
            case "add":
                const date = data[1];

                const questionMessage = await bot.sendMessage(
                    chatId,
                    `*–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –æ–ø–∏—Å –≤–∞—à–æ–≥–æ –ø–ª–∞–Ω—É:*`,
                    {
                        parse_mode: "Markdown",
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{ text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data: "cancel_plan_writing" }]
                            ]
                        })
                    }
                );
                
                botService.changeUserState(chatId, {
                    stage: "writing_plan",
                    data: {
                        questionMessageId: questionMessage.message_id,
                        date
                    }
                });
                break;

            case "list":
                const dateForFindPlans = data[1];
                const plans = await db.models.Plan.findAll({
                    where: {
                        accountId: chatId,
                        date: dateForFindPlans
                    }
                });
                let plansMessagesIds = [];

                if(plans.length == 0) {
                    const tempMessage = await bot.sendMessage(
                        chatId,
                        `*–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å*`,
                        {
                            parse_mode: "Markdown"
                        }
                    );
                    setTimeout(() => {
                        botService.close(chatId, tempMessage.message_id, bot);
                    }, 7000);
                }
                else {
                    let plansCounter = 1;
                    for(const plan of plans) {
                        const ikeyboard = [];
                        if(plan.dataValues.status == "inProgress") {
                            ikeyboard.push([{ text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data: `plan|accept|${plan.dataValues.id}|${plansCounter}` }, { text: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå", callback_data: `plan|cancel|${plan.dataValues.id}|${plansCounter}` }]);
                            ikeyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úñ", callback_data: "close" }]);
                        }
                        else {
                            ikeyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úñ", callback_data: "close" }]);
                        }
                        const planMessage = await bot.sendMessage(
                            chatId,
                            `*–ü–ª–∞–Ω ‚Ññ${plansCounter} (${planStuses[plan.dataValues.status]}):*\n\n`+
                            JSON.parse(plan.dataValues.text),
                            {
                                parse_mode: "Markdown",
                                reply_markup: JSON.stringify({
                                    inline_keyboard: ikeyboard
                                })
                            }
                        );
                        plansCounter++;

                        plansMessagesIds.push(planMessage.message_id);
                    }

                    await bot.sendMessage(
                        chatId,
                        `*–ó–∞–∫—Ä–∏—Ç–∏ –ø–ª–∞–Ω–∏:*`,
                        {
                            parse_mode: "Markdown",
                            reply_markup: JSON.stringify({
                                inline_keyboard: [
                                    [{ text: "–ó–∞–∫—Ä–∏—Ç–∏ —É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úñ", callback_data: "close_all|"+plansMessagesIds.join("|") }]
                                ]
                            })
                        }
                    );
                    
                }
        
                break;

            case "del":
                
                break;

            case "accept":
                const planIdForAccept = data[1];
                const planNumForAccept = data[2];

                await db.models.Plan.update({ status: "completed" }, {
                    where: {
                        id: planIdForAccept
                    }
                });
                const updatedPlan = await db.models.Plan.findAll({
                    where: {
                        id: planIdForAccept
                    }
                });
                console.log('updatedPlan :>> ', updatedPlan);
                const plan = updatedPlan[0];
                
                const ikeyboard = [];
                ikeyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úñ", callback_data: "close" }]);

                if(planIdForAccept) {
                    await bot.editMessageText(
                        `*–ü–ª–∞–Ω ‚Ññ${planNumForAccept} (${planStuses[plan.dataValues.status]}):*\n\n`+
                        JSON.parse(plan.dataValues.text),
                        {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            parse_mode: "Markdown",
                            reply_markup: JSON.stringify({
                                inline_keyboard: ikeyboard
                            })
                        }
                    );
                }
                else {
                    await bot.editMessageText(
                        `*–ü–ª–∞–Ω ${planStuses[plan.dataValues.status]}:*\n\n`+
                        JSON.parse(plan.dataValues.text),
                        {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            parse_mode: "Markdown",
                            reply_markup: JSON.stringify({
                                inline_keyboard: ikeyboard
                            })
                        }
                    );
                }
                break;

            case "cancel":
                const planIdForCancel = data[1];
                const planNumForCancel = data[2];
                

                await db.models.Plan.update({ status: "canceled" }, {
                    where: {
                        id: planIdForCancel
                    }
                });

                const updatedPlanForCancel = await db.models.Plan.findAll({
                    where: {
                        id: planIdForCancel
                    }
                });
                console.log('updatedPlanForCancel :>> ', updatedPlanForCancel);
                const planForCancel = updatedPlanForCancel[0];
                
                const ikeyboardForCancel = [];
                ikeyboardForCancel.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úñ", callback_data: "close" }]);

                if(planNumForCancel) {
                    await bot.editMessageText(
                        `*–ü–ª–∞–Ω ‚Ññ${planNumForCancel} (${planStuses[planForCancel.dataValues.status]}):*\n\n`+
                        JSON.parse(planForCancel.dataValues.text),
                        {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            parse_mode: "Markdown",
                            reply_markup: JSON.stringify({
                                inline_keyboard: ikeyboardForCancel
                            })
                        }
                    );
                }
                else {
                    await bot.editMessageText(
                        `*–ü–ª–∞–Ω ${planStuses[planForCancel.dataValues.status]}:*\n\n`+
                        JSON.parse(planForCancel.dataValues.text),
                        {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            parse_mode: "Markdown",
                            reply_markup: JSON.stringify({
                                inline_keyboard: ikeyboardForCancel
                            })
                        }
                    );
                }
                break;

            default:
                break;
        }


    } catch (error) {
        console.log('error.message (in callbackController.plan):>> ', error.message);
    }
};

export default callbackController;